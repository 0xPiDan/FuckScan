##目前先公布端口扫描的部分代码####

import sys
import socket
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton, QTextEdit, QMessageBox, QFileDialog
from PyQt5.QtCore import Qt, QThread, pyqtSignal


class PortScannerThread(QThread):
    scan_result = pyqtSignal(str)

    def __init__(self, target_host, start_port, end_port, start_1port=None):
        super().__init__()
        self.target_host = target_host
        self.start_port = start_1port
        self.end_port = end_port

    def run(self):
        for port in range(self.start_port, self.end_port + 1):
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((self.target_host, port))
                if result == 0:
                    self.scan_result.emit(f"Port {port} is open")
                sock.close()
            except socket.error:
                pass


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("0xThrL团队  PortScan")

        self.host_label = QLabel("目标IP:", self)
        self.host_label.move(20, 20)

        self.host_text = QTextEdit(self)
        self.host_text.setGeometry(120, 20, 200, 30)

        self.start_port_label = QLabel("Start Port:", self)
        self.start_port_label.move(20, 70)

        self.start_port_text = QTextEdit(self)
        self.start_port_text.setGeometry(120, 70, 100, 30)

        self.end_port_label = QLabel("End Port:", self)
        self.end_port_label.move(230, 70)

        self.end_port_text = QTextEdit(self)
        self.end_port_text.setGeometry(320, 70, 100, 30)

        self.scan_button = QPushButton("Scan", self)
        self.scan_button.setGeometry(20, 120, 80, 30)
        self.scan_button.clicked.connect(self.start_scan)

        self.result_label = QLabel("Scan Result:", self)
        self.result_label.move(20, 170)

        self.result_text = QTextEdit(self)
        self.result_text.setGeometry(20, 200, 400, 200)
        self.result_text.setReadOnly(True)

        self.export_button = QPushButton("Export", self)
        self.export_button.setGeometry(20, 420, 80, 30)
        self.export_button.clicked.connect(self.export_result)

    def start_scan(self):
        target_host = self.host_text.toPlainText()
        start_port = int(self.start_port_text.toPlainText())
        end_port = int(self.end_port_text.toPlainText())

        self.result_text.clear()

        self.port_scanner = PortScannerThread(target_host, start_port, end_port)
        self.port_scanner.scan_result.connect(self.update_result)
        self.port_scanner.finished.connect(self.scan_finished)
        self.port_scanner.start()

    def update_result(self, result):
        self.result_text.append(result)

    def scan_finished(self):
        QMessageBox.information(self, "Scan Finished", "Port scan has finished.")

    def export_result(self):
        file_path, _ = QFileDialog.getSaveFileName(self, "Export Result", "", "Text Files (*.txt)")

        if file_path:
            with open(file_path, 'w') as file:
                file.write(self.result_text.toPlainText())


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.setGeometry(100, 100, 440, 470)
    window.show()
    sys.exit(app.exec_())
